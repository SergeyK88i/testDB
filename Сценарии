Верхнеуровнево
https://mermaid.live/edit#pako:eNp1VN1u2jAYfRXL14CaQPjJxaZJ3U9vqmrd1YALC9wWiSQohLUdQWqp1m7qpE7TpO2m26rtAbIOVgpteYXPb7TPToLoliABiY_POf6OP7tPG06TU5Nuu6yzQ16s1myCn02PuV4VPoo3cAcjcSbewQSuCVxBAHNxAHfisE6y2Qdkg7ldvmZ73Pb68FVhYxjhdwYTMRTvCdwi5QbGCrhFlfEgtAh_l_hSz4cf6IGUkPsLuTOYiVOfbDYclz9pO7tVuBDHSitATbkqzSTwTS4KLpXPFIIFVQ7WU6zOJShOZV0TcSiGWNWJWuLUJ-t8N9lMR7N0Yj21qpk4EifibZzKUmVrVsd1XqXUlke77zgyRcsbhYwQO0ZskuZ1EU2MnOboE8CtTzbazE42KaBJzAoWDAjSHL5ERSNbnPnkWavrOe5-sraB2vfmp4l-UJ2CbQNXBGcGcCUOMONLCHzylHWS1YumxLLhckNymv5_HTJXKmFzDuWTL0nMSnYqySa7z0hz-oQ-U3EUBoqFq_2SQa06jWTxMoqnsNAkOpLxAVDn7jnvdhy7y6vwUwV7g3PD-oLwlBEcHqpyh4uNjJr6nkCILPVgAhp3TgK0tPcJaLRvSZJx0glYFNM_SIjF7wpc53veo4bXcuw-nGN0fzC4U4In5A7mOaKuoWvVepcyyYeDOIWYFW9XuPPxJibPOpdJ-uSx3azCZwxZNRKe53Ec9wj_AnXh_FaB0wy1uGuxVhNv174UrVFvh1u8Rk18bPIt1mt7NVqzBziV9Txnc99uUNNzezxDXae3vUPNLdbu4luv02QeX20xvKWtxWiH2S8dx4op-ErNPt2jZlbT8rmVvF6saEa5qK9oxUKG7lNTL-YqRb1kVFbKZa1UyZeMQYa-VhJaTteNvKHpWqGAaKlgDP4CQ-sA_g

Сценарий 1
https://mermaid.live/edit#pako:eNqlVt1uGkcUfpXRSLmzLRbWhnBRyQJaRYpC5XUSKQFFIxgbVNi1lkWJA0iOaeNUiZqoUtWrpPIbENdbGwj4Fc68Uc6ZWQpr48RRuFjYnXO-73znb-nwileVPMt3fbFXY9v5ksvwc-sWg2P1EkKYwEAdwDkMmcVWGfwNA7jAB1P1guHTCZyizUi9gAGDM3wewpjO1CGcGyQnEH7wGP6BKYxVXx0RJJreHKbMVld_YA9Eo14VgXS8tl-RHfgTAcboeYrhvYRz9ZbdySOSdpkiywTPRjDomSDMNY5BsF1ymhA1Oh1o3hECTNRrGHZZwfc9f0u29jy3JR_DMUqYwkf1O9IcqjeMbvCiXiHVR0QImfqVYOATxnQIg7JhjaFoLQW3amFGNN0pCYX_ZpCU7SNy1_hRAUaqX76BjqUacjVZ-WWWNKKcwgmE-D2iVJ8wp3h_K1dwojwtWGtYeI-qKCgY6gpNuuyefGoMvkfBEp4FCnNa8XyZR5VLwj7V-K8Z3g-w4thTlO-5nCdOrrhVcJ5sF7c37_auEs-gDfcxOWspIUva6qjLnPburmwFW7IiGpVrdF7ocMIZfSQv5hnBo9e_6IuRGnl6ImbYZp76ptW_EfkD-mA-4Awxa97TYqOqlZlh0wdRHdCOmqJPrYuDjN1KwzNmNHwXaPtJJxD7B4blr2XrHXWX6msEIwepc23fl27wbfQxqssoelAeinrwo-fnZSDqjVYHPlD6qfp6vMPYGjF9oRtBRzbszYFnmVkCuhhD_MTIne-7VyQXm26B5bzLfpJBZL-440wl482YL2xv3rnrRKrnfjqoTVc09p_Ln4Uvmoj0Ts8c7bczqhB158BUyYxCLHUxX41Gmg26vK4l5irUG7MrYtNUnicvBqThdVvkasLFhlwynRg0xar36sRU_ARbLVrOoV6Pv12dygjQpP0vsqUwL4Gpt11W3NmR_v092oDXzCYuZjSmoMZRDGH5Oqb3JHdJ0F1a0_-XltpAS6RtfymB2te8hf6IFWYh0C-tgpmUG6-CK7gLi2AedMnlK7wp_aaoV_H93iHfEg9qsilLPIs_q3JHtBtBiZfcHpqKduA5-26FZwO_LVe477V3azy7IxotvGtrunxd4P-E5sxkT7iPPG_xlmc7_BnPWnZqLZlI21Yyk8qsp-z0Ct_n2VXLWktZ9noiuZFIZNKZpGX3VvhzjWCtJTfsTNpObNxO306u26lM7zM8fGg9

Full
https://mermaid.live/edit#pako:eNqdls1O20AQx19ltRK3gBJ7_REfKlWih156oacSDlZiIBKxo9SRoCFSAFFatWqqqlJ7aSnqC5g0ESEp8Aq7b9TZdUkcew2xE8Uf6_n_Zj07M9kOrno1B1t4p2U3d9HL9YqL4LPh2y1_k35hp_SWDlmfvadjeo3oFQ3oHevRW3a0hVZXn6Dnru-4fof-FMMjOoTfFH43YD9CcAroXzoSj2CI9bshPzyGYs45pOecSgfCdkIDRC9BOoUvDB6ijarj2q26V9qkF-ytgAVgyOdUshD9Np8WgsEbMY0JO6LBVtLTD45kH_jrjNkROwbVmZjvZO5HSfpRwE-6VOLnN52yE3bG3t2HY45Xk3gV8DEF60uoFzyeXIfoHUQn4JdzMEmCCYBlIgn7-_936nHfc6iWhGoAXbCW0H6BnyvWg3BFFlBPsnRgfRaZMoX7KwTDM6F0mudCGibWMevN4UYSbgA8kVp3iwCpk68gmbCTMHDwngGAF6JiJp2Z4CxFtxXN-1k2ixJ64ez7T6t-3XNLHVgpXj1DSINPUHMjXkM8l69FrAc8i7qLDCXGUHIw1BhDzcEgMQbJwdBiDC0HQ48x9BwMI8YwcjDMGMPMwAiPkbx4vKGkSB7PYrlHRdqUI5WWIsjrT12quaWo0vuB3BkJZek9J9KuUrRpnVLuUMu-ftpDPVTuRc-2BAlh1jAay4QiYZ43Q8ysGWkuG_TwuLKCYBNzKTY68cJkfT4w5acBbCpG7BTBo2jvH9FBSgXyrYmYLsxgDHH9eIieubXNhfHZdmkIp0Dsef7M_pQSNSYnptTGcsYki7GWxVjPYmxkMTYfNsYF3HBaDbteg81th4sr2N91Gk4FW3BZc7bt9p5fwRW3C6Z22_c2DtwqtvxW2yngltfe2cXWtr33Gu7azZrtO-t1GzbJjXuTpu2-8rzoLbY6eB9bSpGs6WWilYuaYSglrYAPsGVoa4amq6pRIoapEoV0C_iNkBfXdNUkelk3i6aplQgxu_8AafTKNw

Timeline
https://mermaid.live/edit#pako:eNp1VF1rGkEU_SvDPIs1bjTuvknqQ6DBEG0fykJYdJMs6BrMCk0loEmbBAy1oYX2odS2v8BqpOrq5i_c-Uc9M2vS1SbLfszcuffcc8-92uSlWtnmBvecql1xXNt0GS7P8So2ox751Kc5Ey18_qj3bwrEGU1pzLZf7bDsFqOPNKQRzWHth8Hh-9gueU7NZfSNxjTHM0O0L66x7osuoxv6HDrKi76LNg4CGgCoQyMm0ZDLp7G4EB1msEL-5e5mrhBbLPYKm_ndXGGvmC9mX0RwbiRRiaNQ6A65JOsZjcSZaCmkFAN9X3wQl6ANP_H-Pz8JEAHtSYto40RRu1pQCyRXAK4mvUWxfXU-pHEE5hfAARJ1hLiLgg0pVKCEhd2HQtDXdFe0jGaaMPFOnANgKi6QMZDCkv8YbZxNWHZnSybpYeOLc1W87ApoBIgfKfWnTyg5URMAqEupj4T5Cv9bRE1FW6oXSFVXRcTqSRGXRVLE0J4uzcLTAex3i4DOMzVyA4XaiSB-AcBQFXMF3fpsO1fMSqSfcnjwjBXdttQ0LDMCsqyrHOV_c7xKWkW1VIrHBmVpAsLZHqjSxrLBsjei-2RX1G_jXkgA_YjIrHRVydsrWi4PHAARj-1MtXGRNFT1kyr7wXNpdE2Xx3jVrlctp4x_gKZMYHLv0K7aJjewLNv7VqPimdx0T-FqNbxa4cQtccOrN-wYr9caB4fc2Lcqx9g1jsqWZz93rIO6VX2wHlnu61qteh-CLTea_A031rRUPJ1KaZlEOrme1HDH-Ak3dC2uJ_VUckPfSCf0RHrjNMbfKoC1uAabntbWtUwmk9DXMqd_AS4tiaM

##### Логика поведения агента: #####

1) Анализ входящего запроса:
- Определение контекста из DIALOG_HISTORY
- Проверка текущего состояния источника
- Выбор подходящего сценария

2) Проверка параметров:

Автоматическая проверка через META:
- Запрос данных по API
- Валидация полученных значений
- Сравнение с требованиями плана
- Запись результатов в SOURCE_SCORES_DETAILS

Проверка через диалог:
- Выбор шаблона из DIALOG_PARAMS
- Задание вопросов пользователю
- Валидация ответов
- Запись в DIALOG_HISTORY
- Расчет баллов

3) Расчет индекса:
- Сбор всех оценок из SOURCE_SCORES_DETAILS
- Применение весов параметров
- Проверка критических параметров
- Расчет общего балла
- Запись в SOURCE_SCORES_TOTAL


4) Формирование рекомендаций:
- Анализ отстающих параметров
- Выбор шаблонов из PARAMETER_TEMPLATES
- Приоритизация рекомендаций
- Формирование плана действий

5) Мониторинг прогресса:
- Отслеживание изменений в META
- Проверка выполнения рекомендаций
- Анализ динамики показателей
- Выявление застоя

6) Сценарии взаимодействия:
"Новый источник":
- Создание записи в SOURCES
- Базовая проверка всех параметров
- Формирование начального индекса

"Запрос индекса":
- Проверка актуальности данных
- Расчет текущего индекса
- Сравнение с историей
- Формирование отчета

"Что улучшить":
- Анализ текущих оценок
- Выявление слабых мест
- Формирование рекомендаций
- Приоритизация действий

"Проверка параметра":
- Выбор метода проверки (META/диалог)
- Получение данных
- Расчет оценки
- Обновление индекса

7) Правила принятия решений:
- Если параметр < threshold -> запуск "Что улучшить"
- Если нет прогресса > 7 дней -> эскалация
- Если критический параметр = 0 -> блокировка
- Если все параметры > threshold -> предложение плана A+

8) Обработка ошибок:
- Недоступность META -> использование последних данных
- Неверный формат ответа -> запрос уточнения
- Противоречивые данные -> запрос подтверждения
- Технические проблемы -> информирование о статусе

9) Контекстная память:
- Хранение истории диалогов
- Отслеживание выполненных проверок
- Запоминание проблемных мест
- Учет предыдущих рекомендаций

10) Приоритизация действий:
- Критические параметры -> немедленная реакция
- Важные параметры -> плановая проверка
- Стандартные параметры -> регулярный мониторинг

##### Список таблиц #####
Всего 9 основных таблиц:

SOURCES: 
- Основная информация об источниках
- "Кто это"
- "Какой план выбран"

SOURCE_SCORES_TOTAL:
- Итоговые оценки источников
- "Какой общий балл"
- "История изменений"

SOURCE_SCORES_DETAILS:
- Детальные оценки по параметрам
- "Из чего сложился балл"
- "История по каждому параметру"

EVALUATION_PARAMETERS:
- Справочник параметров оценки
- "Что оцениваем"
- "Как считаем баллы"

PLAN_PARAMETERS:
- Требования планов
- "Что нужно для плана А"
- "Какие пороги прохождения"

DIALOG_PARAMS: 
- Шаблоны для ведения диалога
- "Как спрашивать"
- "Как реагировать на ответы"

META_PARAMS:
- Инструкции для работы с МЕТА
- "Где искать данные"
- "Как их валидировать"

PARAMETER_TEMPLATES:
- Шаблоны рекомендаций
- "Что советовать при проблемах"
- "Как формировать отчеты"

DIALOG_HISTORY:
- История диалогов
- "О чем говорили"
- "Какие ответы получили"

###### таблицы со схемами #####

Основные таблицы:

SOURCES:
id | name | created_at | updated_at | plan_id
- Хранит базовую информацию об источниках
- Связывает с планом
- Отслеживает даты создания/обновления

SOURCE_SCORES_TOTAL:
source_id | date | total_score | status
- Хранит итоговые баллы
- История изменений общего индекса
- Статус оценки

SOURCE_SCORES_DETAILS:
source_id | parameter_id | date | score | details
- Детальные оценки по каждому параметру
- История изменений параметров
- Комментарии к оценкам
EVALUATION_PARAMETERS:
id | name | description | max_score | source | rules
- 17 параметров которые мы добавили
- Правила проверки для каждого
- Источник данных для проверки

Справочники:
PLAN_PARAMETERS:
plan_id | parameter_id | required | threshold
- Требования планов A/A+
- Пороговые значения
- Обязательность параметров

PARAMETER_TEMPLATES:
parameter_id | template_type | content
- Шаблоны проверок
- Шаблоны рекомендаций
- Документация по параметрам

Диалоги:
DIALOG_PARAMS:
id | template_type | content
- Шаблоны сообщений
- Варианты ответов
- Сценарии диалогов

DIALOG_HISTORY:
source_id | parameter_id | date | message | status
- История общения
- Статусы рекомендаций
- Контекст диалогов


##### Разбираем связи между таблицами: #####
1. SOURCES <-> SOURCE_SCORES_TOTAL
- Связь по source_id
- Один источник -> много оценок
- История изменений общего балла

2. SOURCES <-> SOURCE_SCORES_DETAILS
- Связь по source_id
- Один источник -> много параметров
- Детальные оценки каждого параметра

3. SOURCE_SCORES_DETAILS <-> EVALUATION_PARAMETERS
- Связь по parameter_id
- Правила оценки для каждого параметра
- Расчет баллов по правилам

4. SOURCES <-> PLAN_PARAMETERS
- Связь через plan_id
- Требования выбранного плана
- Проверка соответствия

5. DIALOG_HISTORY <-> DIALOG_PARAMS
- Связь по parameter_id
- Шаблон диалога -> реальный диалог
- История взаимодействия

##### Разберем как агент формирует рекомендации: #####
1)Бинарные параметры (да/нет):
Параметр: Версионирование
Значение: true/false
Оценка: 
- true = 10 баллов
- false = 0 баллов

2) Параметры с градацией:
Параметр: Мнемоника
Значения:
- Соответствует стандарту = 10 баллов
- Требует доработки = 5 баллов
- Отсутствует = 0 баллов

3)Числовые параметры:
Параметр: Количество выделенных специалистов
Значения:
- 3 и более = 10 баллов
- 2 специалиста = 7 баллов
- 1 специалист = 3 балла
- 0 специалистов = 0 баллов

Статусные параметры:
Параметр: Статус архитектуры в Мета
Значения:
- APPROVED = 10 баллов
- IN_REVIEW = 5 баллов
- DRAFT = 3 балла
- NOT_STARTED = 0 баллов

Итоговый расчет:

Каждый параметр имеет вес (важность)
Умножаем балл на вес
Суммируем все взвешенные баллы
Делим на максимально возможную сумму
Получаем процент готовности

Версионирование (вес 3):
true = 10 баллов × 3 = 30

Мнемоника (вес 5):
Соответствует = 10 баллов × 5 = 50

Итого: (30 + 50) / (30 + 50) × 100% = 100%

Такой подход позволяет:

Гибко оценивать разные типы параметров
Учитывать важность каждого параметра
Давать четкую обратную связь источнику
Формировать понятные рекомендации по улучшению



Бинарные (да/нет = 10/0):
Наличие прямых изменений в БД (№10)
Источник использует партиционирование (№15)
Источник использует шардирование (№16)
Все типы версионируемые (№17)

Статусные (APPROVED/IN_REVIEW/DRAFT/NOT_STARTED):
Статус АС/ФП/Модуля (№2)
Архитектура (№3)

Градация (10/5/0):
Объект репликации (№1)
Ссылки на ИВ (№5)
TSCPR_1-CB-47-05 (№8)
Требование TSCPR_1-CB-38-05 (№9)
Требование TSCPR_1-CB-46-05 (№11)
Мнемонический код (№13)

Числовые/Форматные:
Код Инфопотока (№4)
Класс конфиденциальности (№6)
Требования к загрузке (№7)
Оформление комплексной заявки (№12)
Название и версия СУБД (№14)

PLAN_PARAMETERS:
plan_id | parameter_id | required | threshold
'A' | 1  | true | {"min_score": 8}  -- Объект репликации
'A' | 2  | true | {"min_score": 8}  -- Статус АС/ФП/Модуля
'A' | 3  | true | {"min_score": 8}  -- Архитектура
'A' | 4  | true | {"min_score": 8}  -- Код Инфопотока
'A' | 5  | true | {"min_score": 7}  -- Ссылки на ИВ
'A' | 6  | true | {"min_score": 10} -- Класс конфиденциальности
'A' | 7  | true | {"min_score": 7}  -- Требования к загрузке
'A' | 8  | true | {"min_score": 10} -- TSCPR_1-CB-47-05
'A' | 9  | true | {"min_score": 7}  -- TSCPR_1-CB-38-05
'A' | 10 | true | {"min_score": 10} -- Прямые изменения БД
'A' | 11 | true | {"min_score": 7}  -- TSCPR_1-CB-46-05
'A' | 12 | true | {"min_score": 7}  -- Комплексная заявка
'A' | 13 | true | {"min_score": 7}  -- Мнемонический код
'A' | 14 | true | {"min_score": 7}  -- Версия СУБД
'A' | 15 | true | {"min_score": 10} -- Партиционирование
'A' | 16 | true | {"min_score": 10} -- Шардирование
'A' | 17 | true | {"min_score": 10} -- Версионируемые типы

Критические параметры (min_score 10):
Вес в общем расчете: 40%
- Если хотя бы один не достигает 10 → блокирующее условие
- Требуется 100% соответствие

Важные параметры (min_score 8):
Вес в общем расчете: 35%
- Допускается небольшое отклонение
- Влияют на возможность перехода на план A+

Стандартные параметры (min_score 7):
Вес в общем расчете: 25%
- Наиболее гибкие в оценке
- Формируют базовый уровень готовности

Формула расчета:
Индекс = (Сумма баллов критических * 0.4) + 
         (Сумма баллов важных * 0.35) + 
         (Сумма баллов стандартных * 0.25)

Блокирующий случай:

Агент определяет:
- Какой критический параметр не прошел
- Выдает конкретные шаги по исправлению
- Предлагает сценарий "Проверка параметра"
Критические:
- Один параметр = 9 (недостаточно)
- Остальные = 10
- Блокировка независимо от других параметров
Результат: Не соответствует плану А

На грани допустимого:
Агент анализирует:
- Находит важные параметры ниже 8
- Приоритизирует их по весу
- Предлагает сценарий "Что улучшить"

Критические:
- Все = 10
- 60 * 0.4 = 24

Важные:
- Два параметра = 7 (ниже порога)
- Два параметра = 9
- 32 * 0.35 = 11.2

Стандартные:
- Все = 7
- 49 * 0.25 = 12.25

Итоговый индекс: 47.45
Результат: Требуется улучшение важных параметров

Несбалансированный:
Агент выявляет:
- Группу отстающих параметров
- Считает потенциальный прирост
- Рекомендует начать с быстрых улучшений

Критические: все 10
Важные: все 10
Стандартные: все 6
Результат: Не проходит из-за стандартных

##### Взаимодействие с БД #####

"Запрос индекса"
- Получить source_id из контекста
- Проверить SOURCES существование источника
- Проверить SOURCE_SCORES_TOTAL актуальность оценки
- Если оценка устарела → запустить пересчет
- Получить детализацию из SOURCE_SCORES_DETAILS:
  - Текущее значение каждого параметра
  - Полученные баллы
  - Вес в общем расчете
- Сформировать ответ с баллами и рекомендациями
- Если баллы низкие → предложить "Что улучшить"

##### Пример использования связей: #####

Источник выбирает план А
Агент смотрит в PLAN_PARAMETERS какие параметры нужны для плана А
Для каждого параметра из EVALUATION_PARAMETERS:
Если источник DIALOG → запрашивает у пользователя и сохраняет в DIALOG_PARAMS
Если источник META → получает из Меты и сохраняет в META_PARAMS
Рассчитывает баллы и сохраняет в SOURCE_SCORES
Всю коммуникацию записывает в DIALOG_HISTORY

##### Пример взаимодействия #####
1. Входной запрос:
Пользователь: "Что мне нужно сделать для повышения баллов?"

2. Проверка источника:
Агент: "Проверяю данные по вашему источнику SOURCE_001..."

3. Анализ текущего состояния:
Агент: "Ваш текущий балл 65 из 100. Давайте посмотрим детали:
- Мнемоника: 10/10 ✓
- Версионирование: 5/10 ⚠
- Архитектура: 0/10 ✗
- Документация: 10/10 ✓
- Тестовые данные: 5/10 ⚠"

4. Приоритизация по весам:
Агент: "На основе весов параметров, вот приоритетные направления:
1. Архитектура (вес 5) - потенциал +10 баллов
2. Версионирование (вес 4) - потенциал +5 баллов
3. Тестовые данные (вес 3) - потенциал +5 баллов"

5. Рекомендации:
Агент: "Рекомендую начать с архитектуры, так как:
- Наибольший потенциал роста
- Высокий вес параметра
- Блокирует другие улучшения"

6. Конкретные шаги:
Агент: "Для улучшения архитектуры нужно:
1. Создать документ в Мета
2. Описать текущую архитектуру
3. Отправить на согласование
Хотите, я покажу шаблон документа?"

7. Отслеживание прогресса:
Агент: "После выполнения каждого шага, возвращайтесь - я помогу проверить результат и подскажу следующие действия"

